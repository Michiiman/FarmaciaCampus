// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(FarmaciaContext))]
<<<<<<<< HEAD:Persistence/Data/Migrations/20230927202133_InitialCreateMig.Designer.cs
    [Migration("20230927202133_InitialCreateMig")]
========
    [Migration("20230927194741_InitialCreateMig")]
>>>>>>>> Alejandro:Persistence/Data/Migrations/20230927194741_InitialCreateMig.Designer.cs
    partial class InitialCreateMig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Compra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCompra")
                        .HasColumnType("date")
                        .HasColumnName("FechaCompra");

                    b.Property<int>("ProveedorIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProveedorIdFk");

                    b.ToTable("compra", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.FacturaVenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EmpleadoIdFk")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaFactura")
                        .HasColumnType("date")
                        .HasColumnName("FechaFactura");

                    b.Property<int>("PacienteIdFk")
                        .HasColumnType("int");

                    b.Property<string>("PrecioTotal")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("PrecioTotal");

                    b.Property<int>("RecetaIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoIdFk");

                    b.HasIndex("PacienteIdFk");

                    b.HasIndex("RecetaIdFk")
                        .IsUnique();

                    b.ToTable("FacturaVenta", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Medicamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaExpiracion")
                        .HasColumnType("date")
                        .HasColumnName("FechaExpiracion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("Nombre");

                    b.Property<int>("Precio")
                        .HasColumnType("int")
                        .HasColumnName("Precio");

                    b.Property<int>("ProveedorIdFk")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int")
                        .HasColumnName("Stock");

                    b.Property<string>("TipoMedicamento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProveedorIdFk");

                    b.ToTable("Medicamento", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MedicamentoComprado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CantidadComprada")
                        .HasColumnType("int")
                        .HasColumnName("CantidadComprada");

                    b.Property<int>("CompraIdFk")
                        .HasColumnType("int");

                    b.Property<int>("MedicamentoIdFk")
                        .HasColumnType("int");

                    b.Property<int>("PrecioCompra")
                        .HasColumnType("int")
                        .HasColumnName("PrecioCompra");

                    b.HasKey("Id");

                    b.HasIndex("CompraIdFk");

                    b.HasIndex("MedicamentoIdFk");

                    b.ToTable("MedicamentoComprado", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MedicamentoReceta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("MedicamentosIdfk")
                        .HasColumnType("int");

                    b.Property<int>("RecetaIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicamentosIdfk");

                    b.HasIndex("RecetaIdFk");

                    b.ToTable("MedicamentosReceta", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MedicamentoVendido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CantidadVendida")
                        .HasColumnType("int")
                        .HasColumnName("Cantidad");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Descripcion");

                    b.Property<int>("FacturaVentaIdFk")
                        .HasColumnType("int");

                    b.Property<int>("MedicamentoIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacturaVentaIdFk");

                    b.HasIndex("MedicamentoIdFk");

                    b.ToTable("MedicamentoVendido", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Direccion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar")
                        .HasColumnName("Nombre");

                    b.Property<string>("NumeroDocumento")
                        .HasColumnType("longtext");

                    b.Property<int>("TipoDocumentoIdFk")
                        .HasColumnType("int");

                    b.Property<int>("TipoPersonaIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoDocumentoIdFk");

                    b.HasIndex("TipoPersonaIdFk");

                    b.ToTable("Persona", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Receta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DoctorIdFk")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaExpedicion")
                        .HasColumnType("date")
                        .HasColumnName("FechaExpedicion");

                    b.Property<int>("PacienteIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorIdFk");

                    b.HasIndex("PacienteIdFk");

                    b.ToTable("Receta", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.ToTable("rol", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Telefono", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar")
                        .HasColumnName("Numero");

                    b.Property<int>("PersonaIdFk")
                        .HasColumnType("int");

                    b.Property<string>("TipoTelefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar")
                        .HasColumnName("TipoTelefono");

                    b.HasKey("Id");

                    b.HasIndex("PersonaIdFk");

                    b.ToTable("Telefono", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TipoDocumento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("Nombre");

                    b.HasKey("Id");

                    b.ToTable("tipoDocumento", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TipoPersona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar")
                        .HasColumnName("tipoPersona");

                    b.HasKey("Id");

                    b.ToTable("TipoPersona", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar")
                        .HasColumnName("Email");

                    b.Property<int>("EmpleadoIdfk")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoIdfk")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserRol", b =>
                {
                    b.Property<int>("UserIdFk")
                        .HasColumnType("int");

                    b.Property<int>("RolIdFk")
                        .HasColumnType("int");

                    b.HasKey("UserIdFk", "RolIdFk");

                    b.HasIndex("RolIdFk");

                    b.ToTable("userRol", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Compra", b =>
                {
                    b.HasOne("Domain.Entities.Persona", "Persona")
                        .WithMany("Compras")
                        .HasForeignKey("ProveedorIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Domain.Entities.FacturaVenta", b =>
                {
                    b.HasOne("Domain.Entities.Persona", "Empleado")
                        .WithMany("EmpleadosVentas")
                        .HasForeignKey("EmpleadoIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Persona", "Paciente")
                        .WithMany("PacientesVentas")
                        .HasForeignKey("PacienteIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Receta", "Receta")
                        .WithOne("FacturaVenta")
                        .HasForeignKey("Domain.Entities.FacturaVenta", "RecetaIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");

                    b.Navigation("Paciente");

                    b.Navigation("Receta");
                });

            modelBuilder.Entity("Domain.Entities.Medicamento", b =>
                {
                    b.HasOne("Domain.Entities.Persona", "Persona")
                        .WithMany("Medicamentos")
                        .HasForeignKey("ProveedorIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Domain.Entities.MedicamentoComprado", b =>
                {
                    b.HasOne("Domain.Entities.Compra", "Compra")
                        .WithMany("MedicamentosComprados")
                        .HasForeignKey("CompraIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Medicamento", "Medicamento")
                        .WithMany("MedicamentosComprados")
                        .HasForeignKey("MedicamentoIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compra");

                    b.Navigation("Medicamento");
                });

            modelBuilder.Entity("Domain.Entities.MedicamentoReceta", b =>
                {
                    b.HasOne("Domain.Entities.Medicamento", "Medicamento")
                        .WithMany("MedicamentosRecetas")
                        .HasForeignKey("MedicamentosIdfk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Receta", "Receta")
                        .WithMany("MedicamentosRecetas")
                        .HasForeignKey("RecetaIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicamento");

                    b.Navigation("Receta");
                });

            modelBuilder.Entity("Domain.Entities.MedicamentoVendido", b =>
                {
                    b.HasOne("Domain.Entities.FacturaVenta", "FacturaVenta")
                        .WithMany("MedicamentosVendidos")
                        .HasForeignKey("FacturaVentaIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Medicamento", "Medicamento")
                        .WithMany("MedicamentosVendidos")
                        .HasForeignKey("MedicamentoIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacturaVenta");

                    b.Navigation("Medicamento");
                });

            modelBuilder.Entity("Domain.Entities.Persona", b =>
                {
                    b.HasOne("Domain.Entities.TipoDocumento", "TipoDocumento")
                        .WithMany("Personas")
                        .HasForeignKey("TipoDocumentoIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TipoPersona", "TipoPersona")
                        .WithMany("Personas")
                        .HasForeignKey("TipoPersonaIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoDocumento");

                    b.Navigation("TipoPersona");
                });

            modelBuilder.Entity("Domain.Entities.Receta", b =>
                {
                    b.HasOne("Domain.Entities.Persona", "Doctor")
                        .WithMany("Doctores")
                        .HasForeignKey("DoctorIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Persona", "Paciente")
                        .WithMany("Pacientes")
                        .HasForeignKey("PacienteIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Domain.Entities.Telefono", b =>
                {
                    b.HasOne("Domain.Entities.Persona", "Persona")
                        .WithMany("Telefonos")
                        .HasForeignKey("PersonaIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Persona", "Persona")
                        .WithOne("User")
                        .HasForeignKey("Domain.Entities.User", "EmpleadoIdfk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Domain.Entities.UserRol", b =>
                {
                    b.HasOne("Domain.Entities.Rol", "Rol")
                        .WithMany("UsersRols")
                        .HasForeignKey("RolIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UsersRols")
                        .HasForeignKey("UserIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Compra", b =>
                {
                    b.Navigation("MedicamentosComprados");
                });

            modelBuilder.Entity("Domain.Entities.FacturaVenta", b =>
                {
                    b.Navigation("MedicamentosVendidos");
                });

            modelBuilder.Entity("Domain.Entities.Medicamento", b =>
                {
                    b.Navigation("MedicamentosComprados");

                    b.Navigation("MedicamentosRecetas");

                    b.Navigation("MedicamentosVendidos");
                });

            modelBuilder.Entity("Domain.Entities.Persona", b =>
                {
                    b.Navigation("Compras");

                    b.Navigation("Doctores");

                    b.Navigation("EmpleadosVentas");

                    b.Navigation("Medicamentos");

                    b.Navigation("Pacientes");

                    b.Navigation("PacientesVentas");

                    b.Navigation("Telefonos");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Receta", b =>
                {
                    b.Navigation("FacturaVenta");

                    b.Navigation("MedicamentosRecetas");
                });

            modelBuilder.Entity("Domain.Entities.Rol", b =>
                {
                    b.Navigation("UsersRols");
                });

            modelBuilder.Entity("Domain.Entities.TipoDocumento", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Domain.Entities.TipoPersona", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("UsersRols");
                });
#pragma warning restore 612, 618
        }
    }
}
